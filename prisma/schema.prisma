// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(cuid())
  address   String
  username  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Prizes    Prizes[]
  Tickers   Ticket[]

  @@index([address])
  @@map("accounts")
}

enum DrawType {
  DAILY
  WEEKLY
  MONTHLY
}

model Draw {
  id                String   @id @default(cuid())
  type              DrawType @default(WEEKLY)
  address           String   @default("0x")
  onChainId         Int
  guaranteedPrize   Decimal  @db.Decimal(78, 0)
  ticketPrice       Decimal  @db.Decimal(78, 0)
  startTime         BigInt
  endTime           BigInt
  charityWallet     String
  managementWallet  String
  minTickets        BigInt
  maxTicketsPerUser BigInt
  currentPrizePool  Decimal  @db.Decimal(78, 0)
  isActive          Boolean  @default(true)
  isComplete        Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  prizes            Prizes[]
  slots             Ticket[]

  @@index([type])
  @@map("draws")
}

model Ticket {
  id          String   @id @default(cuid())
  slots       BigInt
  price       Decimal  @db.Decimal(78, 0)
  draw        Draw     @relation(fields: [drawId], references: [id])
  drawId      String
  owner       Account  @relation(fields: [ownerId], references: [id])
  ownerId     String
  txHash      String? // Transaction hash from blockchain
  purchasedAt DateTime @default(now())

  @@unique([txHash])
  @@index([drawId])
  @@index([ownerId])
  @@map("tickets")
}

model Prizes {
  id        String  @id @default(cuid())
  position  Int
  prize     Decimal @db.Decimal(78, 0)
  draw      Draw    @relation(fields: [drawId], references: [id])
  drawId    String
  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  @@unique([drawId, position])
  @@index([drawId])
  @@index([accountId])
  @@map("winners")
}
